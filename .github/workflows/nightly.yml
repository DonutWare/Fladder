name: Nightly Release

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
    types:
      - closed
  workflow_dispatch:

env:
  NIGHTLY_TAG: nightly

jobs:
  # Only run if PR was merged or if it's a direct push to develop
  check-trigger:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Check if should run
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  fetch-info:
    needs: [check-trigger]
    if: needs.check-trigger.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    outputs:
      version_name: ${{ steps.fetch.outputs.version_name }}
      flutter_version: ${{ steps.fetch.outputs.flutter_version }}
      nightly_version: ${{ steps.fetch.outputs.nightly_version }}
      release_date: ${{ steps.fetch.outputs.release_date }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Fetch version name and create nightly version
        id: fetch
        run: |
          # Extract version_name from pubspec.yaml
          VERSION_NAME=$(grep '^version:' pubspec.yaml | cut -d ':' -f2 | cut -d '+' -f1 | tr -d ' ')
          echo "version_name=${VERSION_NAME}" >> "$GITHUB_OUTPUT"

          # Extract flutter_version from .fvmrc
          FLUTTER_VERSION=$(jq -r '.flutter' .fvmrc)
          echo "flutter_version=${FLUTTER_VERSION}" >> "$GITHUB_OUTPUT"

          # Create nightly version with date and time
          RELEASE_DATE=$(date -u "+%Y%m%d-%H%M%S")
          NIGHTLY_VERSION="${VERSION_NAME}-nightly-${RELEASE_DATE}"
          echo "nightly_version=${NIGHTLY_VERSION}" >> "$GITHUB_OUTPUT"
          echo "release_date=${RELEASE_DATE}" >> "$GITHUB_OUTPUT"

          # Print versions for logging
          echo "Base version: $VERSION_NAME"
          echo "Flutter version: $FLUTTER_VERSION"
          echo "Nightly version: $NIGHTLY_VERSION"
        shell: bash

  build-android:
    needs: [fetch-info]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Set build type for nightly
        run: |
          echo "BUILD_MODE=profile" >> $GITHUB_ENV
          echo "ARTIFACT_SUFFIX=nightly" >> $GITHUB_ENV
          echo "AAB_PATH=productionProfile" >> $GITHUB_ENV

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"
          cache: "gradle"
          check-latest: true

      - name: Set up Flutter
        uses: subosito/flutter-action@v2.19.0
        with:
          channel: "stable"
          flutter-version: ${{needs.fetch-info.outputs.flutter_version}}
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: Get dependencies
        run: flutter pub get

      - name: Build Android APK and AAB
        run: |
          flutter build apk --${{ env.BUILD_MODE }} --build-number=${{github.run_number}} --flavor production
          flutter build appbundle --${{ env.BUILD_MODE }} --build-number=${{github.run_number}} --flavor production

      - name: Rename APK and AAB
        run: |
          mkdir -p build/app/outputs/android_artifacts
          mv build/app/outputs/flutter-apk/app-production-${{ env.BUILD_MODE }}.apk "build/app/outputs/android_artifacts/${{ env.ARTIFACT_SUFFIX }}.apk"
          mv build/app/outputs/bundle/${{ env.AAB_PATH }}/app-production-${{ env.BUILD_MODE }}.aab "build/app/outputs/android_artifacts/${{ env.ARTIFACT_SUFFIX }}.aab"

      - name: Archive Android artifacts
        uses: actions/upload-artifact@v4.0.0
        with:
          name: fladder-android
          path: build/app/outputs/android_artifacts/

  build-windows:
    runs-on: windows-latest
    needs: [fetch-info]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Set up Flutter
        uses: subosito/flutter-action@v2.19.0
        with:
          channel: "stable"
          flutter-version: ${{needs.fetch-info.outputs.flutter_version}}
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: Get dependencies
        run: flutter pub get

      - name: Build Windows EXE
        run: flutter build windows --build-number=${{ github.run_number }}

      - name: Compile Inno Setup installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: windows/windows_setup.iss
          options: /O+
        env:
          FLADDER_VERSION: ${{needs.fetch-info.outputs.nightly_version}}

      - name: Archive Windows portable artifact
        uses: actions/upload-artifact@v4.0.0
        with:
          name: fladder-windows-portable
          path: build\windows\x64\runner\Release\

      - name: Archive Windows installer artifact
        uses: actions/upload-artifact@v4.0.0
        with:
          name: fladder-windows-installer
          path: windows\Output\fladder_setup.exe

  build-ios:
    runs-on: macos-latest
    needs: [fetch-info]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Set up Flutter
        uses: subosito/flutter-action@v2.19.0
        with:
          channel: "stable"
          flutter-version: ${{needs.fetch-info.outputs.flutter_version}}
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: Get dependencies
        run: flutter pub get

      - name: Build iOS app
        run: flutter build ipa --no-codesign --flavor production --build-number=${{ github.run_number }}

      - name: Create unsigned IPA
        run: |
          cd build/ios/archive/Runner.xcarchive/Products/Applications/
          mkdir Payload
          mv Runner.app Payload/
          zip -r iOS.ipa Payload

      - name: Archive iOS IPA artifact
        uses: actions/upload-artifact@v4.0.0
        with:
          name: fladder-iOS
          path: build/ios/archive/Runner.xcarchive/Products/Applications/iOS.ipa

  build-macos:
    runs-on: macos-latest
    needs: [fetch-info]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Set up Flutter
        uses: subosito/flutter-action@v2.19.0
        with:
          channel: "stable"
          flutter-version: ${{needs.fetch-info.outputs.flutter_version}}
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: Get dependencies
        run: flutter pub get

      - name: Build macOS app
        run: flutter build macos --flavor production --build-number=${{ github.run_number }}

      - name: Ensure correct app name casing
        run: |
          APP_DIR="build/macos/Build/Products/Release-production"
          mv "$APP_DIR/fladder.app" "$APP_DIR/Fladder.app"

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Create DMG with custom background
        run: ./scripts/create_dmg.sh

      - name: Archive macOS artifact
        uses: actions/upload-artifact@v4.0.0
        with:
          name: fladder-macOS
          path: build/macos/Build/Products/Release-production/macOS.dmg

  build-linux:
    runs-on: ubuntu-latest
    needs: [fetch-info]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Set up Flutter
        uses: subosito/flutter-action@v2.19.0
        with:
          channel: "stable"
          flutter-version: ${{needs.fetch-info.outputs.flutter_version}}
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: Update build number in pubspec.yaml
        run: |
          sed -i -E 's/(version: [0-9]+\.[0-9]+\.[0-9]+\+)[0-9]+/\1${{ github.run_number }}/' pubspec.yaml

      - name: Get dependencies
        run: flutter pub get

      - name: Get packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev libmpv-dev patchelf cmake clang libfuse2

      - name: Build Linux app
        run: flutter build linux --release --build-number=${{ github.run_number }}

      - name: Fix RPATH
        run: |
          for lib in "build/linux/x64/release/bundle/lib"/*.so; do
            [[ -f "$lib" && -n "$(patchelf --print-rpath "$lib")" ]] && \
            patchelf --set-rpath '$ORIGIN' "$lib"
          done
          patchelf --set-rpath '$ORIGIN/lib' "build/linux/x64/release/bundle/Fladder"

      - name: Archive Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: fladder-linux
          path: build/linux/x64/release/bundle

      - name: Build AppImage
        run: |
          sed -i -E 's/(version:\s*)latest/\1${{needs.fetch-info.outputs.nightly_version}}/' AppImageBuilder.yml
          wget -O appimage-builder-x86_64.AppImage https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage
          chmod +x appimage-builder-x86_64.AppImage
          sudo mv appimage-builder-x86_64.AppImage /usr/local/bin/appimage-builder
          appimage-builder --recipe AppImageBuilder.yml

      - name: Archive Linux AppImage artifact
        uses: actions/upload-artifact@v4
        with:
          name: fladder-linux-appimage
          path: |
            Fladder_x86_64.AppImage
            Fladder_x86_64.AppImage.zsync

  build-web:
    runs-on: ubuntu-latest
    needs: [fetch-info]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Set up Flutter
        uses: subosito/flutter-action@v2.19.0
        with:
          channel: "stable"
          flutter-version: ${{needs.fetch-info.outputs.flutter_version}}
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:"
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: Get dependencies
        run: flutter pub get

      - name: Build web app
        run: |
          flutter build web --release --build-number=${{github.run_number}}

      - name: Archive web artifact
        uses: actions/upload-artifact@v4.0.0
        with:
          name: fladder-web
          path: build/web

  create_nightly_release:
    name: Create Nightly Release
    needs:
      - fetch-info
      - build-android
      - build-windows
      - build-ios
      - build-macos
      - build-linux
      - build-web    
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Delete existing nightly release
        run: |
          # Delete existing nightly release and tag with better error handling
          echo "Checking for existing nightly release..."
          if gh release view ${{ env.NIGHTLY_TAG }} >/dev/null 2>&1; then
            echo "Deleting existing nightly release..."
            gh release delete ${{ env.NIGHTLY_TAG }} --yes --cleanup-tag
          else
            echo "No existing nightly release found."
          fi
          
          # Clean up any orphaned tags
          if git tag -l | grep -q "^${{ env.NIGHTLY_TAG }}$"; then
            echo "Deleting orphaned nightly tag..."
            git push origin --delete ${{ env.NIGHTLY_TAG }} || true
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate changelog
        id: changelog
        run: |
          # Get the latest release tag
          LATEST_RELEASE=$(gh release list --limit 1 --exclude-drafts --json tagName --jq '.[0].tagName' || echo "")
          
          if [ -z "$LATEST_RELEASE" ]; then
            echo "No previous releases found, generating changelog from initial commit"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Generating changelog from $LATEST_RELEASE to HEAD"
            CHANGELOG=$(git log ${LATEST_RELEASE}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- No changes since last release"
          fi
          
          # Create changelog with proper formatting
          cat > changelog.md << EOF
          # 🌙 Nightly Build - $(date -u "+%Y-%m-%d %H:%M:%S UTC")
          
          This is an automated nightly build containing the latest changes from the develop branch.
          
          **⚠️ Warning:** This is a development build and may contain bugs or incomplete features.
          
          ## 📋 Changes since last release:
          
          $CHANGELOG
          
          ---
          
          📅 **Build Date:** $(date -u "+%Y-%m-%d %H:%M:%S UTC")  
          🔧 **Build Number:** ${{ github.run_number }}  
          📝 **Commit:** ${{ github.sha }}  
          🌿 **Branch:** develop
          EOF
          
          echo "changelog_file=changelog.md" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Artifacts Android
        uses: actions/download-artifact@v4
        with:
          name: fladder-android
          path: fladder-android

      - name: Move Android
        run: |
          mv fladder-android/nightly.apk Fladder-Android-${{needs.fetch-info.outputs.nightly_version}}.apk
          mv fladder-android/nightly.aab Fladder-Android-${{needs.fetch-info.outputs.nightly_version}}.aab

      - name: Download Windows portable artifact
        uses: actions/download-artifact@v4
        with:
          name: fladder-windows-portable
          path: fladder-windows-portable

      - name: Compress Windows
        run: |
          cd fladder-windows-portable
          zip -r ../Fladder-Windows-${{needs.fetch-info.outputs.nightly_version}}.zip .

      - name: Download Windows installer artifact
        uses: actions/download-artifact@v4
        with:
          name: fladder-windows-installer
          path: fladder-windows-installer

      - name: Rename Windows installer
        run: mv fladder-windows-installer/fladder_setup.exe Fladder-Windows-${{needs.fetch-info.outputs.nightly_version}}-Setup.exe

      - name: Download Artifacts iOS
        uses: actions/download-artifact@v4
        with:
          name: fladder-iOS
          path: fladder-iOS

      - name: Move iOS
        run: mv fladder-iOS/iOS.ipa Fladder-iOS-${{needs.fetch-info.outputs.nightly_version}}.ipa

      - name: Download Artifacts macOS
        uses: actions/download-artifact@v4
        with:
          name: fladder-macOS
          path: fladder-macOS

      - name: Move macOS
        run: mv fladder-macOS/macOS.dmg Fladder-macOS-${{needs.fetch-info.outputs.nightly_version}}.dmg

      - name: Download Artifacts Linux
        uses: actions/download-artifact@v4
        with:
          name: fladder-linux
          path: fladder-linux

      - name: Compress Linux
        run: |
          cd fladder-linux
          zip -r ../Fladder-Linux-${{needs.fetch-info.outputs.nightly_version}}.zip .

      - name: Download Artifacts Linux AppImage
        uses: actions/download-artifact@v4
        with:
          name: fladder-linux-appimage
          path: fladder-linux-appimage

      - name: Move Linux AppImages
        run: |
          mv fladder-linux-appimage/Fladder_x86_64.AppImage Fladder-Linux-${{needs.fetch-info.outputs.nightly_version}}.AppImage
          mv fladder-linux-appimage/Fladder_x86_64.AppImage.zsync Fladder-Linux-${{needs.fetch-info.outputs.nightly_version}}.AppImage.zsync

      - name: Download Artifacts Web
        uses: actions/download-artifact@v4
        with:
          name: fladder-web
          path: fladder-web

      - name: Compress Web
        run: |
          cd fladder-web
          zip -r ../Fladder-Web-${{needs.fetch-info.outputs.nightly_version}}.zip .

      - name: Create Nightly Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NIGHTLY_TAG }}
          name: "🌙 Nightly Build - ${{needs.fetch-info.outputs.release_date}}"
          body_path: changelog.md
          prerelease: true
          make_latest: false
          fail_on_unmatched_files: true
          files: |
            Fladder-Android-${{needs.fetch-info.outputs.nightly_version}}.apk
            Fladder-Android-${{needs.fetch-info.outputs.nightly_version}}.aab
            Fladder-Windows-${{needs.fetch-info.outputs.nightly_version}}-Setup.exe
            Fladder-Windows-${{needs.fetch-info.outputs.nightly_version}}.zip
            Fladder-iOS-${{needs.fetch-info.outputs.nightly_version}}.ipa
            Fladder-macOS-${{needs.fetch-info.outputs.nightly_version}}.dmg
            Fladder-Web-${{needs.fetch-info.outputs.nightly_version}}.zip
            Fladder-Linux-${{needs.fetch-info.outputs.nightly_version}}.zip
            Fladder-Linux-${{needs.fetch-info.outputs.nightly_version}}.AppImage
            Fladder-Linux-${{needs.fetch-info.outputs.nightly_version}}.AppImage.zsync
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old workflow artifacts
        run: |
          # Clean up artifacts older than 7 days to save storage space
          echo "Cleaning up old workflow artifacts..."
          gh api repos/${{ github.repository }}/actions/artifacts \
            --jq '.artifacts[] | select(.created_at < (now - (7 * 24 * 3600))) | .id' \
            | xargs -I {} gh api repos/${{ github.repository }}/actions/artifacts/{} -X DELETE || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
